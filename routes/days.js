var express = require('express');
var router = express.Router();
const moment = require('moment');
const OpenAI = require('openai');
const Airtable = require('airtable');
const convertDateToISO = require("../modules/formatDates");

const checkCurrentBatch = require('../middlewares/checkCurrentBatch');

const Day = require('../models/Day');
const Generation = require('../models/Generation');



const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY // This is also the default, can be omitted
});


router.use(checkCurrentBatch);

router.get('/all', function (req, res) {
    Day.find()
        .populate("batch")
        .then(days => {
            res.json({ days });
        })
})


router.post('/store', function (req, res) {

    const studentsFeelings = [];

    for (const key in req.body) {
        if (Object.hasOwnProperty.call(req.body, key)) {
            if (key.startsWith('comment_', 0)) {
                let newStu = {
                    student: key.substring('comment_'.length),
                    comment: req.body[key],
                    is_in_difficulty: false
                }
                let diffVal = "is_in_difficulty_" + key.substring('comment_'.length)
                if (req.body[diffVal]) {
                    newStu.is_in_difficulty = true;
                }
                studentsFeelings.push(newStu)
            }
        }
    }

    const newData = {
        date: req.body.date,
        teacher_rate: req.body.teacher_rate,
        batch: req.currentBatchId,
        global_comment: req.body.global_comment,
        student_feeling: studentsFeelings
    }
    console.log(newData)


    Day.findOneAndUpdate({ date: req.body.date }, newData, { upsert: true, new: true, })
        .then(() => {
            return res.json('Succesfully saved.');
        })

});



router.get('/weekcron', function (req, res) {
    const date = req.params['date'] + req.params[0];
    Generation.findOne().then(gen => {

        // can't generate before waiting 8h
        const eightHoursAgo = moment().subtract(8, 'hours');
        const canGenerate = moment(gen.lastWeekGeneration).isBefore(eightHoursAgo);


        if (canGenerate) {

            Day.find({ batch: req.currentBatchId })
                .populate("student_feeling.student")
                .then(async days => {
                    let daysIncluded = [];
                    let students = [];
                    let prompt = "";
                    for (let i = 1; i < 6; i++) {
                        let date = moment().subtract(i, 'days').format('DD/MM/YYYY');
                        daysIncluded.push(date);
                    }
                    const last5Days = days.filter(day => daysIncluded.includes(day.date));

                    last5Days.forEach(el => {
                        prompt += `DEBRIEF JOURNEE : ${el.prompt}  --   `
                    });
                    last5Days[0].student_feeling.forEach(eleve => {
                        students.push(` ${eleve.student.firstname} ${eleve.student.lastname}`)
                    })

                    let promptTosend = `Je suis enseignant et je vais t'envoyer le rÃ©sumÃ© de plusieurs journÃ©es, ces rÃ©sumÃ©s vont contenir mon ressenti mais aussi parfois des remarques pour certains de mes Ã©lÃ¨ves dont je citerai le nom. 
                    Je veux que tu me produises un rÃ©sumÃ© global et concis de ces 5 derniers jours puis que tu ailles Ã  la ligne et que tu crÃ©es un rÃ©sumÃ© court pour chacun de mes Ã©lÃ¨ves (avec un retour Ã  la ligne Ã  chaque fois Ã©galement). Si tu n'obtiens aucune information sur un Ã©lÃ¨ve Ã  travers mes rÃ©sumÃ©s, tu peux Ã©crire 'RAS'. Veuillez ne pas inclure de commentaires gÃ©nÃ©raux ni de prÃ©ambule dans la rÃ©ponse. Fournissez uniquement le rÃ©sumÃ© global des cinq derniers jours et les rÃ©sumÃ©s individuels pour chacun de mes Ã©lÃ¨ves.
                    
                    Voici la liste de mes Ã©lÃ¨ves : ${students}         
                    _______________________________
                    
                    Et voici mes rÃ©sumÃ©s : ${prompt}
                    _______________________________`

                    const chatCompletion = await openai.chat.completions.create({
                        model: "gpt-3.5-turbo",
                        messages: [{
                            "role": "system",
                            "content": promptTosend
                        }],
                    });

                    Generation.updateOne({}, { lastWeekGeneration: new Date() }).then(() => {
                        res.json({ gptAnswer: chatCompletion.choices[0].message })
                    })
                    return;
                });


        } else {
            // Heure actuelle
            let maintenant = moment();

            // DurÃ©e de 8 heures en millisecondes
            let huitHeures = 8 * 60 * 60 * 1000;

            // Calculer la diffÃ©rence de temps depuis la derniÃ¨re action
            let tempsEcoule = maintenant.diff(moment(gen.lastWeekGeneration));

            let tempsRestant = huitHeures - tempsEcoule;
            let duree = moment.duration(tempsRestant);


            res.json({ message: `DÃ©solÃ©, tu dois encore attendre ${duree.hours()} heures et ${duree.minutes()} minutes avant le prochain prompt` })
        }
    })
});

router.get('/generatedaily/:date*', function (req, res) {
    const date = req.params['date'] + req.params[0];

    Day.findOne({ date: date, batch: req.currentBatchId })
        .populate("student_feeling.student")
        .then(day => {
            if (!day) {
                res.json({ message: 'DÃ©solÃ©, cette journÃ©e n\'a pas Ã©tÃ© remplie !' })
                return;
            }
            let dayAppreciation = "bonne";
            switch (day.teacher_rate) {
                case 2:
                    dayAppreciation = "mitigÃ©e";
                    break;
                case 1:
                    dayAppreciation = "difficile";
                    break;
                default:
                    break;
            }

            // Filtre tous ceux sans commentaires
            const comments = day.student_feeling.filter(feelings => feelings.comment !== "");

            let studentsMsg = "";

            comments.forEach(msg => {
                studentsMsg += `${msg.student.firstname} : ${msg.comment} | `;
            });

            const message = `${day.global_comment} ${studentsMsg}Pour les autres Ã©lÃ¨ves RAS ðŸ«¡ Globalement la journÃ©e a Ã©tÃ© ${dayAppreciation}`

            Day.updateOne({ _id: day.id }, { prompt: message }).then(data => {

                const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.STUDENT_AIRTABLE_BASE);

                
                base('Daily standup Nice').select({
                    // Recherchez les enregistrements par date
                    filterByFormula: `FIND(${convertDateToISO(day.date)}, {Date})`
                }).eachPage(function page(records, fetchNextPage) {
                    records.forEach(function (record) {
                        // ID de l'enregistrement trouvÃ©
                        var recordId = record.getId();

                        // Supposons que la cellule cible est dans une colonne nommÃ©e 'Colonne_Cible'
                        var updatedData = {};
                        updatedData['Notes journaliÃ¨res'] = 'Nouvelle valeur'; // Nouvelle valeur Ã  insÃ©rer

                        // Mise Ã  jour de l'enregistrement
                        base('Daily standup Nice').update(recordId, updatedData, function (err, record) {
                            if (err) {
                                console.error(err);
                                return;
                            }
                            console.log(record.get('Notes journaliÃ¨res'));
                        });
                    });

                    fetchNextPage();

                }, function done(err) {
                    if (err) { console.error(err); return; }
                });
                return res.json({ data });

            })

        })


});






router.get('/:date*', function (req, res) {
    const date = req.params['date'] + req.params[0];

    Day.findOne({ date: date, batch: req.currentBatchId })
        .populate('student_feeling.student')
        .then(data => {
            res.json(data)
        })
});

module.exports = router;
